// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  created_at DateTime @default(now())

  tasks         Task[]
  dailyLogs     DailyLog[]
  weeklyReviews WeeklyReview[]

  @@map("users")
}

model Task {
  id          String   @id @default(cuid())
  user_id     String
  title       String
  description String?
  notes       String?
  date        DateTime
  status      TaskStatus @default(todo)
  pinned      Boolean  @default(false)
  priority    Priority?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model DailyLog {
  id            String   @id @default(cuid())
  user_id       String
  date          DateTime
  journal_entry String?
  mood          String?
  water_glasses Int      @default(0)
  exercised     Boolean  @default(false)
  sleep_hours   Float?
  day_complete  Boolean  @default(false)
  created_at    DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, date])
  @@map("daily_logs")
}

model WeeklyReview {
  id               String   @id @default(cuid())
  user_id          String
  week_start       DateTime
  tasks_completed  Int      @default(0)
  tasks_rolled_over Int     @default(0)
  average_water    Float    @default(0)
  exercise_days    Int      @default(0)
  notes            String?
  created_at       DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, week_start])
  @@map("weekly_reviews")
}

enum TaskStatus {
  todo
  in_progress
  done
  blocked
}

enum Priority {
  low
  medium
  high
}